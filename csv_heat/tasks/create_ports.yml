- name: Read existing ports info
  shell: "cat {{port_yaml_path}}"
  register: portcreate

- name: set node
  set_fact:
    node: "{{ item.VMName.split('-')[-1] }}"

- name: set port and ipaddr
  set_fact:
    port_name: "_PORT_v4" 
    ipaddr: "{{ item.ip }}"

- shell: "grep {{node}}{{port_name}} {{port_yaml_path}} | tail -1 | tr -d ':'" 
  register: port_exist

- shell: "echo {{port_exist.stdout}} | awk -F_ '{print $NF}'"
  register: nodename
  when: port_exist.stdout != ""

- set_fact:
    port_name: "{%- if 'v4' in nodename.stdout -%}
                _PORT_v4_1
             {%- else -%}
                _PORT_v4_{{nodename.stdout|int + 1}}
             {%- endif -%}"
  when: port_exist.stdout != ""

# - set_fact:
#     port_name: "{%- if 'v4' in nodename.stdout -%}
#                 {{port_exist.stdout}}_PORT_v4_1
#              {%- else -%}
#                 {{port_exist.stdout}}_PORT_v4_{{nodename.stdout|int + 1}}
#              {%- endif -%}"
#   when: port_exist.stdout != ""
#- debug: var=ipaddr             
# - set_fact:
#     newport: vm_name1
#   loop: "{{ portcreate.stdout_lines }}"
#   when: vm_name in item
- name: create port.yaml
  blockinfile:
    dest: "{{port_yaml_path}}"
    block: "{{ lookup('template', 'port.j2') }}"
    marker: "marker {{ item.ip }}"